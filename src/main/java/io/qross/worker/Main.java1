package io.qross.worker;

import io.qross.core.DataHub;
import io.qross.exception.SQLExecuteException;
import io.qross.ext.Console;
import io.qross.ext.TypeExt;
import io.qross.fs.FileReader;
import io.qross.fs.Path;
import io.qross.jdbc.DataAccess;
import io.qross.jdbc.JDBC;
import io.qross.pql.PQL;
import io.qross.setting.Properties;

import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        String SQL = ""; //待执行的PQL语句
        String vars = ""; //参数
        int userId = 0;
        String userName = "";
        String role = "worker";
        Map<String, Object> info = new HashMap<>();

        Console.writeLine(TypeExt.StringExt("hello").takeBefore("e"));

        for (int i = 0; i < args.length; i++) {
            if (args[i].startsWith("--") && args.length > i + 1) {
                switch(args[i].toLowerCase()) {
                    case "--file": //从文件中加载SQL语句
                        //SQL = Source.fromFile(args[i+1].locate(), "UTF-8").mkString
                        SQL = new FileReader(Path.PathExt(args[i+1]).locate()).readToEnd();
                        break;
                    case "--sql": //执行SQL语句, 不支持在语句中使用双引号，双引号用~u0034代替
                        SQL = args[i+1].replace("~u0034", "\"");
                        break;
                    case "--vars":
                    case "--args":
                        //参数支持PQL所有嵌入规则
                        vars = args[i+1];
                        break;
                    case "--properties": //加载properties文件
                        Properties.loadLocalFile(Path.PathExt(args[i+1]).locate());
                        break;
                    case "--note": //执行Note
                        if (JDBC.hasQrossSystem()) {
                            SQL = DataAccess.QROSS().querySingleValue("SELECT note_code FROM qross_notes WHERE id=?", args[i+1]).asText("");
                        }
                        break;
                    case "--task": //执行Keeper任务
                        if (JDBC.hasQrossSystem()) {
                            SQL = DataAccess.QROSS().querySingleValue("SELECT command_text FROM qross_tasks_dags WHERE id=?", args[i+1]).asText("");
                        }
                        break;
                    case "--login":
                        String[] credentals = args[i+1].split("&");
                        for (String credental : credentals) {
                            if (credental.contains("=")) {
                                String left = credental.substring(0, credental.indexOf("=")).toLowerCase();
                                String right = credental.substring(credental.indexOf("=") + 1);

                                if (left.equals("userid") || left.equals("id") || left.equals("uid") || left.equals("user")) {
                                    userId = Integer.parseInt(right);
                                }
                                else if (left.equals("name") || left.equals("username")) {
                                    userName = right;
                                }
                                else if (left.equals("role") || left.equals("rolename")) {
                                    role = right;
                                }
                                else {
                                    info.put(left, right);
                                }
                            }
                        }
                        break;
                }
            }
        }

        if (!SQL.isEmpty()) {
            new PQL(SQL, DataHub.DEFAULT())
                .signIn(userId, userName, role, info)
                .place(vars)
                .run();
        }
        else {
            throw new SQLExecuteException("No PQL sentences to execute.");
        }
    }
}
